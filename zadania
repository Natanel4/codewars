set alarm
bool set_alarm(const bool& employed,const bool& vacation){
  
  bool result {};
  if (employed == true and vacation == false){  
    result = true;             //The condition needs to be only one.
  }
  else{
    result = false;            //All other cases would be false, it's simple.
  }
  return result;
}

switch it up
#include <string>
#include <stdexcept>

std::string switch_it_up(const int number) {
    switch(number) {
        case 0: return "Zero";
        case 1: return "One";
        case 2: return "Two";
        case 3: return "Three";
        case 4: return "Four";
        case 5: return "Five";
        case 6: return "Six";
        case 7: return "Seven";
        case 8: return "Eight";
        case 9: return "Nine";
        default: throw std::invalid_argument{ "The provided number must be between 0 and 9!" };
    }
}

calculate bmi
std::string bmi(double w, double h) 
{
  double bmi = w / h / h;
  if(bmi <= 18.5) return "Underweight";
  if(bmi <= 25.0) return "Normal";
  if(bmi <= 30.0) return "Overweight";
  return "Obese";
}

return negative
int makeNegative(int num)
{

  if (num > 0) {
    return -num;
  }
  
  return num;
  
}

Convert boolean values to strings 'Yes' or 'No'.
using namespace std;

string bool_to_word(bool value)
{
/* This funtion convert a boolean value to either "Yes" or "No" */
  if(value)
    return ("Yes");  // returns if True case
  else
    return("No");  // returns if False 
  
}

hello world
#include <string>

std::string greet() {
  return "hello world!";
}

grasshopper
int summation(int num){
 int i = 1;
 int stack = 0;
 while (i <= num)
 {
     stack += i;
     i++;
 }
 return stack;
}

will he survive
bool hero(int bullets, int dragons) {
  return bullets >= dragons * 2;
}

Basic Mathematical Operations
int basicOp(char op, int val1, int val2) {
  if (op == '+') {
    return val1 + val2;
  }
  if (op == '-') {
    return val1 - val2;
  }
  if (op == '*') {
    return val1 * val2;
  }
  if (op == '/') {
    return val1 / val2;
  }
}

you cant code under pressure
#include <cstdint>

int32_t double_integer( int32_t n )
{
  return n * 2;
}
